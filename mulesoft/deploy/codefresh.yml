version: 1.0

stages:
  - clone
  - prepare
  - deploy

steps:
  clone:
    title: Cloning MuleSoft Repository
    type: git-clone
    repo: ${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
    revision: ${{CF_BRANCH}}
    git: gh-test-git-provider
    stage: clone

  CloneCodeFreshExtResource:
    title: Cloning Mulesoft Scripts Repository
    type: git-clone
    repo: ${{CF_REPO_OWNER}}/${{CF_EXTERNAL_REPO_NAME}}
    revision: ${{CF_EXTERNAL_BRANCH}}
    git: gh-test-git-provider
    stage: clone

  FetchSecrets:
    title: Fetch secrets from AWS Secrets Manager
    type: aws-secrets-manager
    arguments:
      AWS_DEFAULT_REGION: us-west-2
      secrets:
        - secret_arn: codefresh
          key: sonar_token
          store_in: SONAR_TOKEN
        - secret_arn: codefresh
          key: jira_api_token
          store_in: JIRA_API_TOKEN
        - secret_arn: mulesoft/dev/apikeys
          key: secure_key
          store_in: MULESOFT_SECURE_KEY
        - secret_arn: mulesoft/dev/apikeys
          key: repo_token
          store_in: MULESOFT_REPO_TOKEN
        - secret_arn: mulesoft/dev/apikeys
          key: client_id
          store_in: MULESOFT_CONNECTED_APP_CLIENT_ID
        - secret_arn: mulesoft/dev/apikeys
          key: client_secret
          store_in: MULESOFT_CONNECTED_APP_CLIENT_SECRET
        - secret_arn: mulesoft/dev/apikeys
          key: artifactory_username
          store_in: MULESOFT_ARTIFACTORY_USERNAME
        - secret_arn: mulesoft/dev/apikeys
          key: artifactory_password
          store_in: MULESOFT_ARTIFACTORY_PASSWORD
    stage: prepare

  GenerateConnectedAppToken:
    title: Generate connected app token
    type: freestyle
    image: dwdraju/alpine-curl-jq:latest
    working_directory: ${{CloneCodeFreshExtResource}}
    commands:
      - ls -lth
      - mulesoft/scripts/fetch_connected_app_token.sh
    stage: prepare

  FetchArtifacts:
    title: Fetch Artifacts
    type: freestyle
    image: maven:3.8-openjdk-11-slim
    working_directory: ${{clone}}
    commands:
      - echo token is ${MULESOFT_CONNECTED_APP_TOKEN}
      - >-
        PROJECT_VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )
        PROJECT_ARTIFACT_ID=$( mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout )

        mvn -s ${{CloneCodeFreshExtResource}}/mulesoft/settings.xml
        dependency:get -U
        -DgroupId=com.guardant
        -DartifactId=$PROJECT_ARTIFACT_ID
        -Dversion=$PROJECT_VERSION
        -Dpackaging=jar
        -Dclassifier=mule-application
        -Dtransitive=false
        -DremoteRepositories=ghi-artifactory::::https://artifactory01.ghdna.io/artifactory/gh-SO2C
        -Dmaven.repo.local=/codefresh/volume/m2_repository
        -Dartifactory.username=${MULESOFT_ARTIFACTORY_USERNAME}
        -Dartifactory.password=${MULESOFT_ARTIFACTORY_PASSWORD}
    stage: prepare

  TerraformInitPlanApply:
    image: hashicorp/terraform:1.0.5
    title: Terraform Init, Plan and Apply
    working_directory: ${{clone}}/terraform
    commands:
      - >-
        terraform init
        -input=false
        -backend-config=environments/${TARGET_ENVIRONMENT}/remote-backend.properties
      - terraform validate
      - >-
        terraform plan
        -out=${TARGET_ENVIRONMENT}_tfplan
        -var-file=environments/${TARGET_ENVIRONMENT}/terraform.tfvars
      - >-
        terraform apply ${TARGET_ENVIRONMENT}_tfplan
    stage: deploy

  Deploy:
    title: Deploy to Mulesoft
    type: freestyle
    image: maven:3.8-openjdk-11-slim
    working_directory: ${{clone}}
    commands:
      - echo token is ${MULESOFT_CONNECTED_APP_TOKEN}
      - >-
        PROJECT_VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )
        PROJECT_ARTIFACT_ID=$( mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout )

        mvn -s ${{CloneCodeFreshExtResource}}/mulesoft/settings.xml mule:deploy
        -Dmaven.repo.local=/codefresh/volume/m2_repository
        -P${{TARGET_ENVIRONMENT}}
        -Dartifactory.username=${MULESOFT_ARTIFACTORY_USERNAME}
        -Dartifactory.password=${MULESOFT_ARTIFACTORY_PASSWORD}
        -Dmule.artifact=/codefresh/volume/m2_repository/com/guardant/$PROJECT_ARTIFACT_ID/$PROJECT_VERSION/$PROJECT_ARTIFACT_ID-$PROJECT_VERSION-mule-application.jar
        -Dtoken=${MULESOFT_CONNECTED_APP_TOKEN}
    stage: deploy