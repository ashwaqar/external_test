version: "1.0"

stages:
  - clone
  - build
  - prepare
  - scan
  - test
  - image
  - enrich
  - UpdateDev

steps:
  clone:
    title: Cloning repository
    type: git-clone
    repo: ${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
    revision: ${{CF_BRANCH}}
    git: gh-test-git-provider
    stage: clone

  MavenBuild:
    title: mvn build
    type: freestyle
    image: maven:3.8-openjdk-11-slim
    working_directory: ${{clone}}
      when:
        condition:
          all:
            whenOES: 'includes(lower("${{APP_NAME}}"), "order-events-service") == false'
    commands:
      - >-
        mvn clean package
        -Dmaven.repo.local=/codefresh/volume/m2_repository
    stage: build

  MavenBuildOES:
    title: mvn build oes
    type: freestyle
    image: maven:3.8-openjdk-11-slim
    working_directory: ${{clone}}
      when:
        condition:
          all:
            whenOES: 'includes(lower("${{APP_NAME}}"), "order-events-service") == true'
    commands:
      - >-
        mvn clean package -s ./build/maven-settings.xml
        -Dmaven.repo.local=/codefresh/volume/m2_repository
        -Dserver.username=${ARTIFACTORY_USERNAME}
        -Dserver.password=${ARTIFACTORY_PASSWORD}
        -Dskiptests=true
    stage: build

  MavenGetProjectVersion:
    title: mvn get project version
    type: freestyle
    image: maven:3.8-openjdk-11-slim
    working_directory: ${{clone}}
    commands:
      - export PROJECT_VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )
      - echo "project version is ${PROJECT_VERSION}"
      - cf_export PROJECT_VERSION=${PROJECT_VERSION}
    stage: prepare

  FetchSecrets:
    title: Fetch secrets from AWS Secrets Manager
    type: aws-secrets-manager
    arguments:
      AWS_DEFAULT_REGION: us-west-2
      secrets:
        - secret_arn: codefresh
          key: sonar_token
          store_in: SONAR_TOKEN
        - secret_arn: codefresh
          key: jira_api_token
          store_in: JIRA_API_TOKEN
        - secret_arn: codefresh
          key: github_personal_access_token
          store_in: GITHUB_PERSONAL_ACCESS_TOKEN
        - secret_arn: codefresh
          key: pcc_user
          store_in: PCC_USER
        - secret_arn: codefresh
          key: pcc_password
          store_in: PCC_PASS
        - secret_arn: codefresh
          key: snyk_token
          store_in: SNYK_TOKEN
    stage: prepare

  SnykRepoScan:
    title: Snyk Repo Scan
    image: snyk/snyk:maven-3-jdk-8
    working_directory: ${{clone}}
    fail_fast: false
    environment:
        - SNYK_TOKEN=${SNYK_TOKEN}
        - SNYK_ORG='GH Screening'
    commands:
      - snyk test --severity-threshold=medium
      - snyk monitor
    when:
        condition:
          all:
            RunSnykScan: '${{RUN_SNYK_SCAN}} == true'
    stage: scan  

  sonar:
    title: sonar analysis
    type: freestyle
    image: maven:3.8-openjdk-11-slim
    working_directory: ${{clone}}
    when:
      condition:
        all:
          RunSonar: '${{RUN_SONAR_STEP}} == true'
    commands:
      - >-
        mvn clean install sonar:sonar
        -Dmaven.repo.local=/codefresh/volume/m2_repository
        -Dsonar.host.url=${SONAR_HOST}
        -Dsonar.login=${SONAR_TOKEN}
    stage: test

  # Dedicated twistcli step to ensure twistcli can be pulled (in case target image doesn't have wget).
  # Pulls twistcli to shared volume (the current work directory) which is automatically mounted in target image.
  GetTwistCLI:
    title: Pulling twistcli from Console
    image: alpine
    commands:
      - |
        wget --header "Authorization: Basic $(echo -n $PCC_USER:$PCC_PASS | base64 | tr -d '\n')" "$PCC_CONSOLE_URL/api/v1/util/twistcli"
        chmod a+x ./twistcli
    stage: prepare

  DockerBuild:
    title: Building Docker image
    type: build
    image_name: ${{image_name}}
    working_directory: ${{clone}}
    tags: 
      - ${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - ${{CF_BRANCH_TAG_NORMALIZED}}-latest
    registry: gh-screening-repo
    dockerfile: Dockerfile
    stage: image

  ScanImage:
    title: Scanning image with Prisma Cloud Compute
    image: ${{DockerBuild}}
    commands:
      # --containerized is used because Codefresh SaaS runtime environment doesn't allow access to the Docker socket
      # https://support.codefresh.io/hc/en-us/articles/360017901040-How-to-Access-the-Docker-Daemon-in-a-Codefresh-build
      - ./twistcli images scan --address $PCC_CONSOLE_URL --user $PCC_USER --password $PCC_PASS --containerized --details ${{steps.DockerBuild.imageName}}:${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
    stage: scan

  JiraIssueExtractor:
    title: Extract jira issue from message and convert it to image annotation
    type: jira-issue-extractor
    arguments:
      IMAGE: 137219723686.dkr.ecr.us-west-2.amazonaws.com/${{image_name}}:${{CF_BRANCH_TAG_NORMALIZED}}
      JIRA_PROJECT_PREFIX: SO2C
      MESSAGE: ${{CF_BRANCH}}:${{CF_COMMIT_MESSAGE}}
      JIRA_HOST: guardanthealth.atlassian.net
      JIRA_EMAIL: spothedar@guardanthealth.com
      JIRA_API_TOKEN: ${JIRA_API_TOKEN}
    when:
      condition:
        all:
          JiraIssueExtractor: "true == false"
    stage: enrich

  EnrichImages:
    title: Enrich image with PRs and Issues info
    type: image-enricher
    arguments:
      IMAGE: 137219723686.dkr.ecr.us-west-2.amazonaws.com/${{image_name}}:${{CF_BRANCH_TAG_NORMALIZED}}
      BRANCH: ${{CF_BRANCH}}
      REPO: ${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
      GIT_PROVIDER_NAME: gh-test-git-provider
    when:
      condition:
        all:
          EnrichImages: "true == false"
    stage: enrich
    
  cloneDeployment:
      title: Cloning repository
      type: git-clone
      repo: ${{CF_REPO_OWNER}}/so2c-deployment-manager
      revision: dev
      git: gh-test-git-provider
      when:
        condition:
          all:
            mainBranch: '"${{CF_BRANCH}}" == "main"'
      stage: UpdateDev  
      
  UpdateDev:
      title: Update Dev Version
      type: freestyle
      image: bitnami/git:latest
      working_directory: ${{cloneDeployment}}
      when:
        condition:
          all:
            mainBranch: '"${{CF_BRANCH}}" == "main"'
            validateSha: 'length("${{CF_SHORT_REVISION}}") >= 7'

      commands:
            - git config --global url."https://foo:${GITHUB_PERSONAL_ACCESS_TOKEN}@github.com/gh-org-screening".insteadOf "https://github.com/gh-org-screening"
            - git config --global user.name "gh-lunar2-svc-deployment-user"
            - git config --global user.email "gh-lunar2-svc-deployment-user@guardanthealth.com"
            - sed -i 's/${{image_name}}:.*/${{image_name}}:${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}"/g' ${{image_name}}/helm/${{image_name}}/values.yaml
            - git add ${{image_name}}/helm/${{image_name}}/values.yaml
            - git commit -m  "Upgrade ${{image_name}} dev" || echo "nothing to commit"
            - git push -u origin dev
      stage: UpdateDev    
