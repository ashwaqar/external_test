version: "1.0"

stages:
  - clone
  - prepare
  - terraform
  - sync
  - publish-marker

steps:
  clone:
    title: Cloning MuleSoft Repository
    type: git-clone
    repo: ${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}
    revision: ${{CF_BRANCH}}
    git: gh-test-git-provider
    stage: clone

  CloneCodeFreshExtResource:
    title: Cloning Mulesoft Scripts Repository
    type: git-clone
    repo: ${{CF_REPO_OWNER}}/${{CF_EXTERNAL_REPO_NAME}}
    revision: ${{CF_EXTERNAL_BRANCH}}
    git: gh-test-git-provider
    stage: clone

  FetchSecrets:
    title: Fetch secrets from AWS Secrets Manager
    type: aws-secrets-manager
    arguments:
      AWS_DEFAULT_REGION: us-west-2
      secrets:
        - secret_arn: 'codefresh'
          key: github_personal_access_token
          store_in: GITHUB_PERSONAL_ACCESS_TOKEN
        - secret_arn: 'codefresh'
          key: new_relic_api_key
          store_in: NEW_RELIC_API_KEY
        - secret_arn: 'codefresh'
          key: argo_prod_admin_creds
          store_in: ARGOCD_CREDENTIALS
    stage: prepare

  TerraformInitPlan:
      image: hashicorp/terraform:1.0.5
      title: Terraform Init, Plan
      working_directory: ${{clone}}
      commands:
        - if [ ! -d "terraform" ]; then exit 0; fi
        - git config --global url."https://foo:${GITHUB_PERSONAL_ACCESS_TOKEN}@github.com/gh-org-screening".insteadOf "https://github.com/gh-org-screening"
        - >-
          cd terraform;
          terraform init
          -input=false
          -backend-config=environments/${TARGET_ENVIRONMENT}/remote-backend.properties
        - terraform validate
        - >-
          terraform plan
          -out=${TARGET_ENVIRONMENT}_tfplan
          -var-file=environments/${TARGET_ENVIRONMENT}/terraform.tfvars
      stage: terraform

  ReviewTerraformPlanAndApprove:
      type: pending-approval
      title: Wait for approval
      timeout:
        duration: 300
        finalState: denied
      stage: terraform
      when:
        condition:
          all:
            ProductionEnv: '"${{TARGET_ENVIRONMENT}}" == "prod"'

  TerraformApply:
      image: hashicorp/terraform:1.0.5
      title: Terraform Apply
      working_directory: ${{clone}}
      stage: terraform
      commands:
        - if [ ! -d "terraform" ]; then exit 0; fi
        - git config --global url."https://foo:${GITHUB_PERSONAL_ACCESS_TOKEN}@github.com/gh-org-screening".insteadOf "https://github.com/gh-org-screening"
        - >-
          cd terraform;
          terraform init
          -input=false
          -backend-config=environments/${TARGET_ENVIRONMENT}/remote-backend.properties
        - >-
          terraform plan
          -out=${TARGET_ENVIRONMENT}_tfplan
          -var-file=environments/${TARGET_ENVIRONMENT}/terraform.tfvars
        - terraform apply ${TARGET_ENVIRONMENT}_tfplan

  sync_and_wait:
    title: Sync ArgoCD app and wait
    type: argocd-sync
    stage: sync
    arguments:
      context: $(if [ ${TARGET_ENVIRONMENT} == "prod" ];then echo "argocd-prod"; else echo "argocd-dev";fi)
      app_name: ${{APP_NAME}}-${TARGET_ENVIRONMENT}
      wait_healthy: true
      debug: true
      additional_flags:
        - '--grpc-web'  # Seems to always be needed, regardless of Argo CD using LB svc or Ingress

  FetchMetadataFromArgoCD:
    title: Fetch manifest metadata from ArgoCD
    type: freestyle
    stage: publish-marker
    image: argoproj/argocd:v2.3.2
    working_directory: ${{CloneCodeFreshExtResource}}
    commands:
      - ls -lth scripts
      - scripts/fetch_image_version_from_argocd_manifest.sh

  PublishDeploymentMarker:
    title: publish deploymnent marker on new relic APM
    type: freestyle
    stage: publish-marker
    image: everpeace/curl-jq:latest
    working_directory: ${{CloneCodeFreshExtResource}}
    commands:
      - scripts/publish-newrelic-marker.sh
